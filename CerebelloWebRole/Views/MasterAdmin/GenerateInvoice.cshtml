@using System.Globalization
@model GenerateInvoiceViewModel
@{
    this.ViewBag.Title = "Gerar fatura";
    var step = this.Model == null ? 0 : this.Model.Step ?? 0;
}
<style type="text/css">
    .invoice {
        margin: 5px 0 15px;
        padding: 10px;
        border-radius: 4px;
        display: inline-block;
        cursor: pointer;
    }

    .invoice.is-saved {
        background-color: #DDD;
    }

    .invoice.not-saved {
        background-color: #FDD;
    }
</style>
<script type="text/javascript">
    $(function() {
        //$(".invoice").click(function(e) {
        //    var $this = $(this);
        //    $this.toggleClass("selected");
        //    $this.siblings(".invoice.selected").removeClass("selected");
        //});
    })
</script>
@this.Html.ValidationSummary(false)
@using (this.Html.BeginForm())
{
    <fieldset>
        <input type="hidden" name="Step" value="@step" />
        @if (step == 2)
        {
            <div>Cobrança configurada com sucesso.</div>
            if (this.ViewBag.IsPayPalInvoice == true)
            {
                <div>Agora basta mandar a fatura do PayPal, com os seguintes dados:</div>
                foreach (var eachPi in this.Model.PayPalInvoice.GetType().GetProperties()
                                                .Where(pi => pi.PropertyType.IsValueType || pi.PropertyType == typeof(string)))
                {
                    <div>@EmailHtml.PrintProperty(this.Model.PayPalInvoice, eachPi, false)</div>
                }

                foreach (var eachItem in this.Model.PayPalInvoice.Items)
                {
                    <div>Item @eachItem.NameId</div>
                    foreach (var eachPi in eachItem.GetType().GetProperties()
                                                    .Where(pi => pi.PropertyType.IsValueType || pi.PropertyType == typeof(string)))
                    {
                        <div style="margin-left: 2em;">@EmailHtml.PrintProperty(eachItem, eachPi, false)</div>
                    }
                }
            }
        }
        else if (step == 1)
        {
            <div class="control-group">
                @Html.LabelFor(model => model.PracticeIdentifier)
                <div class="controls">
                    @this.Model.PracticeIdentifier
                    @this.Html.HiddenFor(model => model.PracticeIdentifier)
                </div>
            </div>

            foreach (var eachInvoice in this.Model.Invoices)
            {
                <div class="invoice @(eachInvoice.IsSaved ? "is-saved" : "not-saved")">
                    <div>Início: <strong>@eachInvoice.Start.ToString("yyyy'-'MM'-'dd HH'-'mm'-'ss")</strong></div>
                    @if (eachInvoice.End != null)
                    {
                        <div>Fim: <strong>@eachInvoice.End.Value.ToString("yyyy'-'MM'-'dd HH'-'mm'-'ss")</strong></div>
                    }
                    else
                    {
                        <div>Fim: <strong>N/A</strong></div>
                    }
                    <div>Vencimento: <strong>@eachInvoice.DueDate.ToString("yyyy'-'MM'-'dd HH'-'mm'-'ss")</strong></div>
                    <div>Itens:</div>
                    @foreach (var item in eachInvoice.Items)
                    {
                        <div style="margin-left: 1em; font-size: 0.8em;">Contrato: <strong>@item.ContractType</strong>; Valor: <strong>@StringHelper.FormatMoney(item.Amount)</strong>; Desconto: <strong>@StringHelper.FormatMoney(item.DiscountAmount)</strong></div>
                    }
                    <div style="font-size: 0.8em;">Valor total: <strong>@StringHelper.FormatMoney(eachInvoice.TotalAmount)</strong></div>
                    <div style="font-size: 0.8em;">Desconto total: <strong>@StringHelper.FormatMoney(eachInvoice.TotalDiscount)</strong></div>
                    <div style="font-size: 1.2em;">Valor final: <strong>@StringHelper.FormatMoney(eachInvoice.TotalAmount - eachInvoice.TotalDiscount)</strong></div>
                    <div>
                        <div style="float: right">
                            @if (!eachInvoice.IsSaved)
                            {
                                <a href="@this.Url.Action("GenerateInvoice", new { this.Model.PracticeIdentifier, InvoiceName = eachInvoice.NameId })">Criar fatura</a>
                            }
                            else
                            {
                                <a href="@this.Url.Action("GenerateInvoice", new { this.Model.PracticeIdentifier, InvoiceName = eachInvoice.NameId })">Visualizar fatura</a>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else if (step == 0)
        {
            <div class="control-group">
                @Html.LabelFor(model => model.PracticeIdentifier)
                <div class="controls">
                    @Html.TextBoxFor(model => model.PracticeIdentifier, new { @class = "input-xlarge" })
                </div>
            </div>
            <input type="hidden" name="NoValidation" value="true" />
            <div class="form-actions" style="margin: 0">
                <button class="btn btn-primary btn-large" type="submit">
                    Continuar</button>
            </div>
        }
    </fieldset>
}