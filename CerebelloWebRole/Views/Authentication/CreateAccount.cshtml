@using System.Linq.Expressions
@using CerebelloWebRole.Areas.App.Models
@using CerebelloWebRole.Code
@using CerebelloWebRole.Models
@model CreateAccountViewModel
@{
    this.Layout = "../Shared/_EmptyLayout.cshtml";

    ViewBag.Title = "Login";

    // These objects must be filled, otherwise obscure exceptions may happen.
    // - ViewBag.MedicalSpecialtyOptions
    // - ViewBag.MedicalEntityOptions
    if (!(this.ViewBag.MedicalSpecialtyOptions is IEnumerable<SelectListItem>))
    {
        throw new Exception("ViewBag.MedicalSpecialtyOptions is not of type 'IEnumerable<SelectListItem>'.");
    }
    if (!(this.ViewBag.MedicalSpecialtyOptions is IEnumerable<SelectListItem>))
    {
        throw new Exception("ViewBag.MedicalEntityOptions is not of type 'IEnumerable<SelectListItem>'.");
    }
}
@section Scripts {
    <script src="@Url.Content("~/Scripts/scripts.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/Controls/jquery.cerebello.pager.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/Controls/jquery.cerebello.autocomplete.js")" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            $('#IsDoctor').change(function () {
                if ($(this).is(':checked')) $('.doctor-info').show();
                else $('.doctor-info').hide();
            });
            if ($('#IsDoctor').is(':checked')) $('.doctor-info').show();
            else $('.doctor-info').hide();
        });
    </script>
}
@section Header
{
    <link href="@Url.Content("~/Content/Styles/App/Controls/jquery.cerebello.autocomplete.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/Styles/App/Controls/jquery.cerebello.paginator.css")" rel="stylesheet" type="text/css" />

    <style type="text/css">
        .authentication-container {
            margin: 50px auto;
        }

        @@media screen and (min-width: 768px) {
            .controls-wrapper {
                overflow: hidden;
            }

                .controls-wrapper hr {
                    display: none;
                }

            .practice-properties {
                float: left;
                overflow: hidden;
                margin-right: 20px;
            }

            .person-properties {
                float: right;
                overflow: hidden;
            }

            .user-properties {
                float: left;
                overflow: hidden;
            }

                .user-properties hr {
                    display: block !important;
                }

            .authentication-container {
                max-width: 720px;
            }
        }

        @@media screen and (max-width: 500px) {
            .authentication-container {
                margin: 20px auto;
            }

            .optional {
                display: none;
            }
        }

        body {
            min-width: 300px;
        }
    </style>
}
<div class="authentication-container">
    <div class="authentication-container-wrapper">
        <div class="header">
            <h2>Criar uma conta <span class="optional">no Cerebello</span></h2>
            <div class="buttons-wrapper">
                <a class="btn btn-small" href="@Url.Action("Login")" class="link">Voltar</a>
            </div>
        </div>
        @using (Html.BeginForm(null, null, FormMethod.Post, new { style = "margin:0" }))
        {
            <fieldset>
                <div class="controls-wrapper">
                    @if (this.ViewData.ModelState.GetAllErrors().Any())
                    {
                        <div class="alert alert-block alert-error fade in">
                            <button data-dismiss="alert" class="close" type="button">×</button>
                            @foreach (var eachModelError in this.ViewData.ModelState.GetAllErrors())
                            {
                                <p>@eachModelError.Item2.ErrorMessage</p>
                            }
                        </div>
                    }

                    @*Properties of the practice*@
                    <div class="practice-properties">
                        <div class="control-group">
                            @Html.LabelFor(model => model.PracticeName)
                            <div class="controls">
                                @Html.TextBoxFor(model => model.PracticeName, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.PracticeTimeZone)
                            <div class="controls">
                                @Html.EnumDropdownListFor(model => model.PracticeTimeZone)
                            </div>
                        </div>
                    </div>

                    @*Properties of the user as a person and as a doctor*@
                    <div class="person-properties">
                        <hr />
                        <div class="control-group">
                            @Html.LabelFor(model => model.FullName)
                            <div class="controls">
                                @Html.TextBoxFor(model => model.FullName, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.Gender)
                            <div class="controls">
                                @Html.EnumDropdownListFor(model => model.Gender)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.DateOfBirth)
                            <div class="controls">
                                @Html.TextBoxFor(model => model.DateOfBirth)
                            </div>
                            <script type="text/javascript">
                                $("#DateOfBirth").mask("99/99/9999");
                            </script>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.IsDoctor)
                            <div class="controls">
                                @Html.CheckBoxFor(model => model.IsDoctor)
                            </div>
                        </div>
                        <div class="control-group doctor-info" style="@(this.Model == null || !this.Model.IsDoctor ? "display: none" : "")" >
                            @Html.LabelFor(model => model.MedicalSpecialtyId)
                            <div class="controls">
                                @(Html.AutocompleteGridFor(
                                      m => m.MedicalSpecialtyId,
                                      m => m.MedicalSpecialtyName,
                                      Url.Action("LookupMedicalSpecialties", "MedicalSpecialties"),
                                      pm => pm.Id,
                                      pm => pm.Name,
                                      new Expression<Func<MedicalSpecialtiesLookupGridModel, object>>[] { pm => pm.Code }
                                      ))
                            </div>
                        </div>
                        <div class="control-group doctor-info" style="@(this.Model == null || !this.Model.IsDoctor ? "display: none" : "")" >
                            @Html.LabelFor(model => model.MedicalEntityId)
                            <div class="controls">
                                @Html.DropDownListFor(
                                    m => m.MedicalEntityId,
                                    (IEnumerable<SelectListItem>)this.ViewBag.MedicalEntityOptions,
                                    "",
                                    new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group doctor-info" style="@(this.Model == null || !this.Model.IsDoctor ? "display: none" : "")" >
                            @Html.LabelFor(model => model.MedicalEntityJurisdiction)
                            <div class="controls">
                                @Html.EnumDropdownListFor(model => model.MedicalEntityJurisdiction)
                            </div>
                        </div>
                        <div class="control-group doctor-info" style="@(this.Model == null || !this.Model.IsDoctor ? "display: none" : "")" >
                            @Html.LabelFor(model => model.MedicCRM)
                            <div class="controls">
                                @Html.TextBoxFor(model => model.MedicCRM)
                            </div>
                        </div>
                    </div>

                    @* Properties of the user as an user *@
                    <div class="user-properties">
                        <hr />
                        <div class="control-group">
                            @Html.LabelFor(model => model.UserName)
                            <div class="controls">
                                @Html.TextBoxFor(model => model.UserName, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.EMail)
                            <div class="controls">
                                @Html.TextBoxFor(model => model.EMail, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.Password)
                            <div class="controls">
                                @Html.PasswordFor(model => model.Password, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.ConfirmPassword)
                            <div class="controls">
                                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "input-xlarge" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-actions" style="margin: 0">
                    <button class="btn btn-primary btn-large" type="submit">
                        Criar conta</button>
                </div>
            </fieldset>
        }
    </div>
</div>
