@model DoctorHomeViewModel
@using Cerebello.Model
@{
    var title = (this.Model.Gender == TypeGender.Male ? "Médico: " : "Médica: ") + this.Model.DoctorName;
    ViewBag.Title = string.Format("{0} · Cerebello", title);
    Layout = "~/Areas/App/Views/Shared/_LayoutDoctor.cshtml";

    var cardView = this.Html.CreateCardView();
    cardView.AddField(m => m.DoctorName, wholeRow: true);
    cardView.AddField(m => m.MedicCrm);
    cardView.AddField(m => m.MedicalSpecialtyName);
    cardView.AddField(m => m.MedicalEntityName);
    cardView.AddField(m => m.MedicalEntityJurisdiction, @<text>@EnumHelper.GetText(@item.MedicalEntityJurisdiction, typeof(TypeEstadoBrasileiro))</text>);

    Func<AppointmentViewModel, string> getCssClass = (vm) =>
        {
            var cssClasses = new List<string>();

            if (vm.Status == (int)TypeAppointmentStatus.NotAccomplished)
                cssClasses.Add("not-accomplished");

            if (vm.IsInThePast)
                cssClasses.Add("in-the-past");

            if (vm.IsNow)
                cssClasses.Add("now");

            return string.Join(" ", cssClasses.ToArray());
        };

    var todaysAppointmentGrid = this.Html.CreateGrid(this.Model.TodaysAppointments);
    todaysAppointmentGrid.AddField(model => model.PatientName, @<text><span class="@getCssClass(item)"><a href="@Url.Action("Details", "Patients", new { id = item.PatientId })">@item.PatientName</a></span></text>);
    todaysAppointmentGrid.AddField(model => model.LocalDateTimeSpelled, header: "Horário", format: @<text><span class="@getCssClass(item)"><a href="@Url.Action("Index", "Schedule", new { y = item.LocalDateTime.Year, m = item.LocalDateTime.Month, d = item.LocalDateTime.Day })">@item.LocalDateTimeSpelled</a></span></text>);
    todaysAppointmentGrid.AddField(model => model.HealthInsuranceId, @<text><span class="@getCssClass(item)"><a href="@Url.Action("Details", "HealthInsurance", new { id = item.HealthInsuranceId })">@item.HealthInsuranceName</a></span></text>);
    todaysAppointmentGrid.AddField(model => model.StatusText, @<text><span class="@getCssClass(item)">@item.StatusText</span></text>);

    // this is not the normal way to create an edit-column. It's just because there's script involved.
    todaysAppointmentGrid.AddField<object>(null, cssClass: "action-column", format: @<text><a href="#" data-val-id="@item.Id" class="status grid-action-link icon-link-edit"></a></text>);

    var nextGenericAppointments = this.Html.CreateGrid(this.Model.NextGenericAppointments);
    nextGenericAppointments.AddField(model => model.Description, @<text><span class="@getCssClass(item)"><a href="@Url.Action("Index", "Schedule", new { y = item.LocalDateTime.Year, m = item.LocalDateTime.Month, d = item.LocalDateTime.Day })">@item.Description</a></span></text>);
    nextGenericAppointments.AddField(model => model.LocalDateTimeSpelled, header: "Data", format: @<text><span class="@getCssClass(item)"><a href="@Url.Action("Index", "Schedule", new { y = item.LocalDateTime.Year, m = item.LocalDateTime.Month, d = item.LocalDateTime.Day })">@item.LocalDateTimeSpelled</a></span></text>);
    // this is not the normal way to create an edit-column. It's just because there's script involved.
    nextGenericAppointments.AddField<object>(null, cssClass: "action-column", format: @<text><a href="#" data-val-id="@item.Id" class="status grid-action-link icon-link-edit"></a></text>);
}

@section SideBar
{
    @{var itemCount = 0;}
    <ul>
        @if (this.CanAccessAction("ExportDoctorXml", "Report"))
        {
            itemCount++;
            <li><a href="@Url.Action("ExportDoctorXml", "Report")" target="_blank" class="icon-link icon-link-import">Exportar XML</a> </li>
        }
        @if (this.CanAccessAction("ExportPatientsPdf", "Report"))
        {
            itemCount++;
            <li><a href="@Url.Action("ExportPatientsPdf", "Report")" target="_blank" class="icon-link icon-link-import">Exportar prontuários em PDF</a> </li>
        }
        @if (this.CanAccessAction("DownloadAllPatientsZipFile", "PatientFiles"))
        {
            itemCount++;
            <li><a href="@Url.Action("DownloadAllPatientsZipFile", "PatientFiles")" class="icon-link icon-link-import">Exportar os arquivos de todos os pacientes em Zip</a> </li>
        }
    </ul>
    @if (itemCount > 0)
    {
        <hr />
    }
    <ul>
        @*<li><a href="#" class="icon-link icon-link-help" onclick="introJs().start(); return false;">Introdução interativa</a></li>*@
        <li><a href="@Url.Action("TheAppointmentLine", "HomeDocs", new { area = "Docs" })" class="icon-link icon-link-help" target="_blank">Ajuda</a></li>
    </ul>
}

@section Title {
    @title
}

@section Scripts
{
    <script type="text/javascript">
        $(function () {
            $("a.status").click(function (e) {
                e.preventDefault();

                var $el = $(this);

                window.appointmentModal = $.modal({
                    url: "@Url.Action("Edit", "Schedule")",
                    title: "Editar consulta",
                    data: {
                        id: $el.attr("data-val-id")
                    },
                    width: 480,
                    height: 200,
                    ok: function () {
                        window.location.reload();
                    }
                });

            });
        })
    </script>
}

@cardView.GetHtml()

<div class="widget">
    <h2>Consultas agendadas para hoje (@this.ViewBag.PracticeLocalDate)
    </h2>
    @todaysAppointmentGrid.GetHtml()
</div>

<div class="widget">
    @{
        var nextGenericAppointmentsNotes = "";
        if (this.Model.NextGenericAppointmentsCount > this.Model.NextGenericAppointments.Count)
        {
            nextGenericAppointmentsNotes = string.Format(
                "(exibindo {0} de {1})",
                this.Model.NextGenericAppointments.Count,
                this.Model.NextGenericAppointmentsCount);
        }
    }
    <h2>Próximos compromissos @nextGenericAppointmentsNotes</h2>
    @nextGenericAppointments.GetHtml()
</div>
