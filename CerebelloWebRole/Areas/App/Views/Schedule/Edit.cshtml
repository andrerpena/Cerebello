@model CerebelloWebRole.Areas.App.Models.AppointmentViewModel
@using CerebelloWebRole.Code.Extensions
@{
    Layout = null;

    bool isEditing = this.ViewBag.IsEditing == true;

    bool isGenericAppointment = Model.IsGenericAppointment && !Model.PatientFirstAppointment;
    bool isFirstAppointment = Model.PatientFirstAppointment && !Model.IsGenericAppointment;
    bool isSubsequentAppointment = !isGenericAppointment && !isFirstAppointment;

    string genericAppointmentOnlyDisplay = isGenericAppointment ? "table-row" : "none";
    string subsequentAppointmentOnlyDisplay = isSubsequentAppointment ? "table-row" : "none";
    string firstAppointmentOnlyDisplay = isFirstAppointment ? "table-row" : "none";

    string saveButtonText = isGenericAppointment ? "salvar compromisso" : "salvar consulta";
}
<div class="appointment-edit">
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "appointment_form" }))
    {
        @Html.ValidationSummary(false)

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.PatientId)
        @Html.HiddenFor(model => model.DoctorId)
        @Html.HiddenFor(model => model.PatientFirstAppointment)
        
        if (!isEditing)
        { 
            <style>
                /* todo: Must vanish with this style. */
                .appointment-edit ul.tabs > li
                {
                    display: inline-block;
                    border: 1px solid black;
                    cursor: pointer;
                }
                /* todo: Must vanish with this style. */
            </style>
            <div class="small-tabs">
                <a id="medical-appointment-tab" class="activated">Consulta</a>
                <a id="generic-appointment-tab">Compromisso</a>
            </div>
        }
        
        @Html.HiddenFor(model => model.IsGenericAppointment)
        
        <table class="form-table">
            @if (!isEditing || isGenericAppointment)
            {
                <tr class="generic-appointment-only" style="display: @genericAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.Description)
                    </th>
                    <td>
                        @Html.TextAreaFor(model => model.Description)
                    </td>
                </tr>
            }
            @if (!isEditing || isFirstAppointment || isSubsequentAppointment)
            {
                <tr class="subsequent-appointments-only" style="display: @subsequentAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.PatientNameLookup)
                    </th>
                    <td>
                        @Html.LookupFor(model => model.PatientId, model => model.PatientNameLookup, Url.Action("lookuppatients", "patients"))
                        @if (Model.Id != null)
                        {
                            <a href="@Url.Action("details", "patients", new { id = Model.PatientId })" class="block-little-link">
                                Ir para o perfil do paciente</a>
                        }
                        <a id="non-existing-user-link" href="#" class="block-little-link">O paciente ainda não
                            é cadastrado</a>
                    </td>
                </tr>
            }
            @if (!isEditing || isFirstAppointment || isSubsequentAppointment)
            {
                <tr class="first-appointment-only" style="display: @firstAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.PatientName)
                    </th>
                    <td>@Html.EditorFor(model => model.PatientName)
                        <a id="existing-user-link" href="#" class="block-little-link">O paciente já é cadastrado</a>
                    </td>
                </tr>
                <tr class="first-appointment-only" style="display: @firstAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.PatientGender)
                    </th>
                    <td>@Html.EnumDropdownListFor(model => model.PatientGender)
                    </td>
                </tr>
                <tr class="first-appointment-only" style="display: @firstAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.PatientCoverageId)
                    </th>
                    <td>@Html.DropDownListFor(model => model.PatientCoverageId, new SelectListItem[] { })
                    </td>
                </tr>
                <tr class="first-appointment-only" style="display: @firstAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.PatientDateOfBirth)
                    </th>
                    <td class="small">@Html.TextBoxFor(model => model.PatientDateOfBirth)
                    </td>
                </tr>
                <tr class="first-appointment-only" style="display: @firstAppointmentOnlyDisplay">
                    <th>@Html.LabelFor(model => model.PatientEmail)
                    </th>
                    <td>@Html.TextBoxFor(model => model.PatientEmail)
                    </td>
                </tr>
            }
        </table>
        <hr />
        <table class="form-table">
            <tr>
                <th>@Html.LabelFor(model => model.Date)
                </th>
                <td class="small">
                    @Html.EditorFor(model => model.Date)
                    <span class="date-spelled">
                        @Model.DateSpelled
                    </span>
                </td>
            </tr>
            <tr>
                <th>
                    Horário
                </th>
                <td class="small">
                    <div>
                        @Html.EditorFor(model => model.Start)<span class="separator">às</span>
                        @Html.EditorFor(model => model.End)
                        <span id="time-validation-icon" class="@(Model.IsTimeValid ? "validation-passed" : "validation-failed")">
                        </span>
                        @* ToDo: continuar desenvolvendo este estilo *@
                        <span id="time-validation-text" style="display: block; font-size: 11px; line-height: 1.2em; padding: 10px 0 5px; color: #DD390D;">@Model.TimeValidationMessage</span>
                    </div>
                    @* Action-links *@
                    <a id="check_time" href="#" class="block-little-link">
                        Verificar disponibilidade deste horário</a>
                    <a id="next_time_from_this_link" href="#" class="block-little-link">
                        Próximo horário livre a partir deste</a>
                    <a id="next_time_link" href="#" class="block-little-link">
                        Próximo horário livre a partir de agora</a>
                </td>
            </tr>
        </table>
        
            if (Model.Id != null)
            {
            <a id="delete-appointment-link" class="block-little-link" href="#">excluir</a>
            }
        
        <div class="submit-bar">
            <input id="save-button" type="submit" value="@saveButtonText" />
            <span class="separator">ou</span> <a id="cancel" href="#">cancelar</a>
        </div>
    }
    <script type="text/javascript">
        $("#appointment_form").ajaxForm({
            success: function(result, contentType) {
                if(contentType == "html") {
                    $(".appointment-edit").replaceWith(result);
                    console.log($(this).length);
                    $("#appointment_form").trigger("modal-resize");
                }
                else {
                    if(result.status == "success")
                    {
                        $(this).trigger("modal-ok");

                        // Updating the components in the background page.
                        var calendar = $("#calendar");
                        if (calendar.length > 0)
                        {
                            // If calendar is there, all the other variables and objects are there too.
                            calendar.fullCalendar("refetchEvents");
                            fetchDatePickerEvents();
                            $(".datepicker").datepicker("refresh");
                        }
                    }
                    else
                    {
                        alert(result.text);
                    }
                }
            },
            error: function(e) {
                alert("Não foi possível salvar a consulta. Erro inesperado.");
            }
        });

        $("#Date").mask("99/99/9999");
        $("#PatientDateOfBirth").mask("99/99/9999");
        $("#Start").mask("99:99");
        $("#End").mask("99:99");

        $("#Date").bind("keyup", function(e) {
            $.getJSON("@Url.Action("GetSpelledDate")", { date: $(this).val() }, function(result) {
                $(".date-spelled").html(result.success ? result.text : "");
            });
        });

//        $("#PatientNameLookup").autocomplete({
//                source: "@Url.Action("searchpatients", "patients")",
//                select: function(event, ui) {
//                            $("#PatientId").val(ui.item.id);
//                        }
//            }).data( "autocomplete" )._renderItem = function( ul, item ) {
//			    return $( "<li></li>" )
//				    .data( "item.autocomplete", item )
//				    .append( "<a><span class='item-title'>" + item.value + "</span><span class='item-description'>" + item.description + "</span></a>" )
//				    .appendTo( ul );
//		    };

        $("#medical-appointment-tab").click(function(e) {
            e.preventDefault();
            
            // marks the selected tab
            $(this).addClass("activated");
            $("#generic-appointment-tab").removeClass("activated");

            $(".generic-appointment-only").hide();
            $(".first-appointment-only").hide();
            $(".subsequent-appointments-only").show();
            $("#IsGenericAppointment").val(false);
            $("#PatientNameLookup").focus();
            $("#save-button").val("salvar consulta");
            $(this).trigger("modal-resize");
        });

        $("#generic-appointment-tab").click(function(e) {
            e.preventDefault();

            // marks the selected tab
            $(this).addClass("activated");
            $("#medical-appointment-tab").removeClass("activated");

            $(".generic-appointment-only").show();
            $(".first-appointment-only").hide();
            $(".subsequent-appointments-only").hide();
            $("#IsGenericAppointment").val(true);
            $("#Description").focus();
            $("#save-button").val("salvar compromisso");
            $(this).trigger("modal-resize");
        });

        $("#non-existing-user-link").click(function(e) {
            e.preventDefault();
            $(".first-appointment-only").show();
            $(".subsequent-appointments-only").hide();
            $("#PatientFirstAppointment").val(true);
            $("#PatientName").focus();
            $(this).trigger("modal-resize");
        });

        $("#existing-user-link").click(function(e) {
            e.preventDefault();
            $(".first-appointment-only").hide();
            $(".subsequent-appointments-only").show();
            $("#PatientFirstAppointment").val(false);
            $("#PatientNameLookup").focus();
            $(this).trigger("modal-resize");
        });

        $("#cancel").click(function(e) {
            e.preventDefault();
            $(this).trigger("modal-cancel");
        });
        
        $("#delete-appointment-link").click(function (e) {
            e.preventDefault();
            var answer = confirm("Deseja realmente excluir esta consulta?\nEsta operação não pode ser desfeita.");
            if (answer) {
                $.getJSON("@Url.Action("delete", new { id = this.Model.Id })", function(data) {
                    if(data.success) {
                        $("#delete-appointment-link").trigger("modal-ok");
                        alert("Esta consulta foi excluída");

                        // Updating the components in the background page.
                        var calendar = $("#calendar");
                        if (calendar.length > 0)
                        {
                            // If calendar is there, all the other variables and objects are there too.
                            calendar.fullCalendar("refetchEvents");
                            fetchDatePickerEvents();
                            $(".datepicker").datepicker("refresh");
                        }
                    }
                    else
                        alert("Não foi possível excluir este paciente.\n" + "Informações técnicas: " + data.text);
                });
            }
        });

        function populateTimeInfo(data) {
            $("#Date").val(data.date);
            $("#Start").val(data.start);
            $("#End").val(data.end);
            $(".date-spelled").html(data.dateSpelled);
        }

        $("#check_time").ajaxLink({
            url: "@Url.Action("verifytimeavailability")",
            data: function() {
                return {
                    date: $("#Date").val(),
                    start: $("#Start").val(),
                    end: $("#End").val(),
                    patientId: $("#PatientId").val()
                }
            },
            success: function(result){
                if(result.success)
                {
                    $("#time-validation-icon").removeClass("validation-failed").addClass("validation-passed");
                    $("#time-validation-text").html("");
                }
                else
                {
                    $("#time-validation-icon").removeClass("validation-passed").addClass("validation-failed");
                    $("#time-validation-text").html(result.text);
                }
            }
        });
                
        $("#next_time_link").ajaxLink({
            url: "@Url.Action("FindNextFreeTime")",
            success: function(data) {
                populateTimeInfo(data);
                $("#time-validation-icon").removeClass("validation-failed").addClass("validation-passed");
                $("#time-validation-text").html("");
            }
        });

        $("#next_time_from_this_link").ajaxLink({
            url: "@Url.Action("FindNextFreeTime")",
            data: function() {
                return {
                    date: $("#Date").val(),
                    time: $("#End").val()
                }
            },
            success: function(data) {
                populateTimeInfo(data);
                $("#time-validation-icon").removeClass("validation-failed").addClass("validation-passed");
                $("#time-validation-text").html("");
            }
        });

        $("#PatientNameLookup").focus();

    </script>
</div>
