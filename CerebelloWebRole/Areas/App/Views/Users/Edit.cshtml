@model UserViewModel
@using System.Linq.Expressions
@{
    string title;
    if (this.Model != null && this.Model.Id.HasValue)
    {
        title = "Editando usuário: " + this.Model.FullName;
    }
    else
    {
        title = "Novo usuário";
    }
    this.ViewBag.Title = string.Format("{0} · Cerebello", title);

    this.Layout = "~/Areas/App/Views/Shared/_LayoutPractice.cshtml";

    var editPanel = this.Html.CreateEditPanel();

    if (this.ViewBag.IsEditingOrCreating == 'C')
    {
        // If Model is null, then the user is being created now,
        // so we allow the user name to be changed.
        editPanel.AddField(m => m.UserName, EditPanelFieldSize.Large);
    }
    else if (this.ViewBag.IsEditingOrCreating == 'E')
    {
        // If Model is not null, then the user already existed before,
        // we cannot allow the user-name to be edited.
        editPanel.AddTextField(m => m.UserName);
    }
    else
    {
        throw new Exception("'ViewBag.IsEditingOrCreating' must be either 'E' or 'C'.");
    }

    editPanel.AddField(m => m.FullName, EditPanelFieldSize.Large);
    editPanel.AddField(m => m.Gender, this.Html.EnumDropdownListFor);
    editPanel.AddField(m => m.DateOfBirth, EditPanelFieldSize.Small);
    editPanel.AddField(m => m.MaritalStatus, this.Html.EnumDropdownListFor);
    editPanel.AddField(m => m.BirthPlace);
    editPanel.AddField(m => m.Cpf);
    editPanel.AddField(m => m.Profissao);

    var editPanelRoles = this.Html.CreateEditPanel();
    editPanelRoles.AddField(m => m.IsAdministrador);
    editPanelRoles.AddField(m => m.IsSecretary);
    editPanelRoles.AddField(m => m.IsDoctor);

    var editPanelMedic = this.Html.CreateEditPanel();
    editPanelMedic.AddField(m => m.MedicCRM);

    // These objects must be filled, otherwise obscure exceptions may happen.
    // - ViewBag.MedicalSpecialtyOptions
    // - ViewBag.MedicalEntityOptions
    if (!(this.ViewBag.MedicalSpecialtyOptions is IEnumerable<SelectListItem>))
    {
        throw new Exception("ViewBag.MedicalSpecialtyOptions is not of type 'IEnumerable<SelectListItem>'.");
    }
    if (!(this.ViewBag.MedicalSpecialtyOptions is IEnumerable<SelectListItem>))
    {
        throw new Exception("ViewBag.MedicalEntityOptions is not of type 'IEnumerable<SelectListItem>'.");
    }

    editPanelMedic.AddField(
        m => m.MedicalSpecialtyId,
        EditPanelFieldSize.Large,
        @<text>@(this.Html.AutocompleteGridFor(
                                m => m.MedicalSpecialtyId,
                                m => m.MedicalSpecialtyName,
                                this.Url.Action("LookupMedicalSpecialties", "MedicalSpecialties", new { area = "" }),
                                pm => pm.Id,
                                pm => pm.Name,
                                new Expression<Func<MedicalSpecialtiesLookupGridModel, object>>[] { pm => pm.Code }))</text>);

    editPanelMedic.AddField(
        m => m.MedicalEntityId,
        EditPanelFieldSize.Large,
        @<text>@this.Html.DropDownListFor(
            m => m.MedicalEntityId,
            (IEnumerable<SelectListItem>)this.ViewBag.MedicalEntityOptions,
            "")</text>);

    editPanelMedic.AddField(m => m.MedicalEntityJurisdiction, this.Html.EnumDropdownListFor);

    var editPanelContact = this.Html.CreateEditPanel();
    editPanelContact.AddField(m => m.Email);
    editPanelContact.AddField(m => m.PhoneCell);
    editPanelContact.AddField(m => m.PhoneLand);
}

@section Title {
    @title @LockIcon.Icon()
}
@section Scripts {
    <script type="text/javascript">
        $(function () {
            $('#IsDoctor').change(function () {
                if ($(this).is(':checked')) $('#MedicEditPanel').show();
                else $('#MedicEditPanel').hide();
            });

            if ($('#IsDoctor').is(':checked') || $('#IsDoctor').val() == 'True') $('#MedicEditPanel').show();
            else $('#MedicEditPanel').hide();
        });
    </script>
    @{
        var hasSubRestrictions = this.ViewBag.CanEditRole == true;
        var isCreating = this.ViewBag.IsEditingOrCreating == 'C';
    }
    @(isCreating
        ? hasSubRestrictions
            ? LockIcon.Script(LockAccessType.AdminOrOwner, notes: "Esta tela possui restrições especificas em alguns campos")
            : LockIcon.Script(LockAccessType.AdminOrOwner)
        : hasSubRestrictions
            ? LockIcon.Script(LockAccessType.SelfOrAdminOrOwner, "usuário", notes: "Esta tela possui restrições especificas em alguns campos")
            : LockIcon.Script(LockAccessType.SelfOrAdminOrOwner, "usuário")
    )

    @LockIcon.Script(LockAccessType.AdminOrOwner, elementAction: LockElementActionType.SectionEdit, cssClass: "lock-role")
}

@section SideBar {
    <a href="http://gravatar.com/emails" class="icon-link icon-link-config">Alterar imagem do Gravatar</a>

    <a href="@this.Url.Action("Index", "PracticeHome")" class="icon-link icon-link-home">Consultório</a>
}
@using (this.Html.BeginForm())
{
    @this.Html.ValidationSummary(false)

    @editPanel.GetHtml()

    if (this.Model == null)
    { 
    @Html.Message(string.Format(
        "A senha padrão deste usuário é {0}. Essa senha será usada somente para fazer o primeiro acesso ao sistema.",
        Constants.DEFAULT_PASSWORD))
    }

    if (this.ViewBag.CanEditRole == true)
    {
        <h2>Funções deste usuário @LockIcon.Icon("lock-role")</h2>
        @:@editPanelRoles.GetHtml()
    }
    else
    {
        @:@this.Html.HiddenFor(m => m.IsAdministrador)
        @:@this.Html.HiddenFor(m => m.IsSecretary)
        @:@this.Html.HiddenFor(m => m.IsDoctor)
    }

    <div id="MedicEditPanel" @(new MvcHtmlString(this.Model != null && this.Model.IsDoctor ? "" : "style=\"display: none\""))>
        <h2>Informações do médico</h2>
        @editPanelMedic.GetHtml()
    </div>
    
    <h2>
        @this.Html.LabelFor(model => model.Address)
    </h2>

    @this.Html.EditorFor(model => model.Address)

    <h2>Informações de contato
    </h2>
    
    @editPanelContact.GetHtml()

    <div class="submit-bar">
        <input type="submit" value="salvar usuário" />
        <span class="separator">ou</span>
        @this.Html.ActionLink("cancelar", "Index", "PracticeHome")
    </div>
}
