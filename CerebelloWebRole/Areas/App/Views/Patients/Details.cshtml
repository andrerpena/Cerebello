@model PatientViewModel
@using Cerebello.Model
@{
    var title = "Paciente: " + this.Model.FullName;
    this.ViewBag.Title = string.Format("{0} · Cerebello", title);
    this.ViewBag.Watermark = "Pesquisar pelo nome do paciente";

    var localNow = (DateTime)this.ViewBag.LocalNow;

    var retornoDateStr = localNow.AddDays(30).ToString("yyyy-MM-dd");

    // creating details CardView
    var basicCard = Html.CreateCardView("Geral");
    basicCard.AddField(m => m.FullName, wholeRow: true);
    basicCard.AddField(m => m.Code);
    basicCard.AddField(m => m.Gender, @<text>@EnumHelper.GetText(@item.Gender, typeof(TypeGender))</text>);
    basicCard.AddField(m => m.DateOfBirth, @<text> @(@item.DateOfBirth.HasValue ? (@item.DateOfBirth.Value.ToShortDateString() + " (" + (@DateTimeHelper.GetPersonAgeInWords(@item.DateOfBirth.Value, localNow))) + ")" : "")</text>, wholeRow: true);
    basicCard.AddField(m => m.Email, @<text><a href="mailto:@item.Email">@item.Email</a></text>, wholeRow: true);

    var phonesCard = this.Html.CreateCardView("Telefones", true);
    phonesCard.AddField(m => m.PhoneLand);
    phonesCard.AddField(m => m.PhoneCell);

    var addressCard = Html.CreateCardView("Endereço", true);
    addressCard.AddField(model => model.Address.Street, wholeRow: true);
    addressCard.AddField(model => model.Address.Complement);
    addressCard.AddField(model => model.Address.Neighborhood);
    addressCard.AddField(model => model.Address.City);
    addressCard.AddField(model => model.Address.StateProvince);
    addressCard.AddField(model => model.Address.CEP);

    var complementaryCard = this.Html.CreateCardView("Dados complementares", true);
    complementaryCard.AddField(m => m.BirthPlace);
    complementaryCard.AddField(m => m.Cpf);
    complementaryCard.AddField(m => m.Rg);
    complementaryCard.AddField(m => m.Ethnicity, @<text>@EnumHelper.GetText(@item.Ethnicity, typeof(TypeEthnicity))</text>);
    complementaryCard.AddField(m => m.MaritalStatus, @<text>@EnumHelper.GetText(@item.MaritalStatus, typeof(TypeMaritalStatus))</text>);
    complementaryCard.AddField(m => m.Profissao);
    complementaryCard.AddField(m => m.Schooling, @<text>@EnumHelper.GetText(@item.Schooling, typeof(TypeSchooling))</text>);

    var familyCard = this.Html.CreateCardView("Dados familiares", true);
    familyCard.AddField(m => m.MotherName);
    familyCard.AddField(m => m.MotherProfession);
    familyCard.AddField(m => m.FatherName);
    familyCard.AddField(m => m.FatherProfession);
    familyCard.AddField(m => m.Responsible);

    var otherInfoCard = this.Html.CreateCardView("Outras informações", true);
    otherInfoCard.AddField(m => m.Observations);

    var futureAppointmentsGrid = this.Html.CreateGrid(this.Model.FutureAppointments, title: "Consultas agendadas para o futuro");
    futureAppointmentsGrid.AddLinkField(model => model.LocalDateTimeSpelled, "Index", "Schedule", a => new { y = a.LocalDateTime.Year, m = a.LocalDateTime.Month, d = a.LocalDateTime.Day });
}
@section Title {
    @title
}
@section SideBar {
    <ul>
        <li><a href="@this.Url.Action("Edit", new { id = this.Model.Id })" class="icon-link icon-link-edit">Editar paciente</a></li>
        @if (this.CanAccessAction("AddMedicalRecords"))
        {
            <li><a href="@this.Url.Action("AddMedicalRecords", new { id = this.Model.Id })" class="icon-link icon-link-edit">Editar consultas</a> </li>
        }
        <li><a href="@this.Url.Action("Edit", new { id = Model.Id })" data-deleteRedirect="@this.Url.Action("Index")" data-deleteUrl="@this.Url.Action("Delete", new { id = this.Model.Id })" data-objectName="@this.Model.FullName" class="icon-link icon-link-delete" id="delete-patient-link">Excluir paciente</a></li>
        <li><a href="@this.Url.Action("Index")" class="icon-link icon-link-home">Resumo de pacientes</a></li>
        @if (this.CanAccessAction("ExportPatientsPdf", "Report"))
        {
            <li><a href="@this.Url.Action("ExportPatientsPdf", "Report", new { patientId = this.Model.Id })" target="_blank" class="icon-link icon-link-import">Exportar PDF</a> </li>
        }
        @if (this.CanAccessAction("DownloadZipFile", "PatientFiles"))
        {
            <li><a href="@this.Url.Action("DownloadZipFile", "PatientFiles", new { patientId = this.Model.Id })" class="icon-link icon-link-import">Exportar arquivos em Zip</a> </li>
        }
        @if (this.CanAccessAction("DownloadBackup", "PatientFiles"))
        {
            <li><a href="@this.Url.Action("DownloadBackup", "PatientFiles", new { patientId = this.Model.Id })" class="icon-link icon-link-import">Exportar backup em Zip</a> </li>
        }
    </ul>
}
@section Scripts
{
    @LockIcon.Script(LockAccessType.You, elementAction: LockElementActionType.Section, cssClass: "lock-hist")
    <script type="text/javascript" src="@Url.Content("~/Scripts/App/Pages/patient-details.js")"></script>

    <script type="text/javascript" src="@this.Url.Content("~/Scripts/jquery.webcam.js")"></script>
    <script type="text/javascript" src="@this.Url.Content("~/Scripts/Controls/jquery.camera.window.js")"></script>
    <script type="text/javascript" src="@this.Url.Content("~/Scripts/App/Pages/camera-window.js")"></script>

    @this.Html.Resources("js")
}

@section Styles
{
    <link rel="stylesheet" type="text/css" href="@this.Url.Content("~/content/Styles/App/Pages/camera_window.css")" />

    @this.Html.Resources("css")
}

<!-- modal-gallery is the modal dialog used for the image gallery -->
<div id="modal-gallery" class="modal modal-gallery hide" tabindex="-1" style="" data-constratio="4 / 3">
    <div class="modal-header">
        <div class="modal-close" data-dismiss="modal"></div>
        <div class="modal-title"></div>
    </div>
    <div class="modal-body"><div class="modal-image"></div></div>
    <div class="modal-footer">
        <a class="btn btn-info modal-prev"><i class="icon-arrow-left icon-white"></i>Anterior</a>
        <a class="btn btn-primary modal-next">Próximo<i class="icon-arrow-right icon-white"></i></a>
        @*<a class="btn btn-success modal-play modal-slideshow" data-slideshow="5000"><i class="icon-play icon-white"></i>Slideshow</a>*@
        <a class="btn modal-download" target="_blank"><i class="icon-download"></i>Download</a>
    </div>
</div>

<div class="patient-info-wrapper">
    <div class="patient-info-picture">
        <img id="patient-picture" src="@Url.Action("GetProfilePicture", "PersonFiles", new { personId = this.Model.PersonId })" data-val-original-src="@Url.Action("GetProfilePicture", "PersonFiles", new { personId = this.Model.PersonId })" />
        <a href="#" id="alter-picture" data-UrlTransferPicture="@this.Url.Action("TransferPersonPictureFromTempContainer", "PersonFiles", new { area = "App", personId = this.Model.PersonId })">Capturar foto</a>
        | <a href="#" id="remove-picture" data-UrlDeletePicture="@this.Url.Action("DeleteProfilePicture", "PersonFiles", new { area = "App", personId = this.Model.PersonId })">Remover foto</a>
    </div>
    <div class="patient-info-content">
        @basicCard.GetHtml()
    </div>
</div>

@phonesCard.GetHtml()

@addressCard.GetHtml()

@complementaryCard.GetHtml()

@familyCard.GetHtml()

@otherInfoCard.GetHtml()

@futureAppointmentsGrid.GetHtml()

@if (this.ViewBag.CanAccessMedicalRecords == true)
{
    <div class="medical-appointments-panel">
        <h2>Histórico do paciente @LockIcon.Icon("lock-hist")</h2>
        @this.Html.Partial("MedicalRecordsViewPartial", this.Model)

        <h2>Nova consulta @LockIcon.Icon("lock-hist")</h2>
        @this.Html.Partial("MedicalRecordsInsertPartial")
        <!-- schedule return -->
        <div>
            <a href="@this.Url.Action("Create", "Schedule", new { area = "App", findNextAvailable = true, patientId = this.Model.Id, date = retornoDateStr, start = "", end = "", doctorId = "" })" class="icon-link icon-link-reload" id="schedule-appointment">Marcar retorno</a>
        </div>
    </div>
}
